/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ComponentLoaderService } from './services/component-loader.service';
import { FeedbackButtonComponent } from './components/feedback-button/feedback-button.component';
import { OrchestratorService } from './services';
import * as i0 from "@angular/core";
import * as i1 from "./services/component-loader.service";
import * as i2 from "./services/orchestrator.service";
var NgxFeedbackService = /** @class */ (function () {
    function NgxFeedbackService(componentLoader, orchestratorService) {
        this.componentLoader = componentLoader;
        this.orchestratorService = orchestratorService;
    }
    /**
     * @return {?}
     */
    NgxFeedbackService.prototype.listenForFeedbacks = /**
     * @return {?}
     */
    function () {
        this.orchestratorService.ngOnInit();
        this.componentLoader.load(FeedbackButtonComponent);
        return this.orchestratorService.onSend;
    };
    NgxFeedbackService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgxFeedbackService.ctorParameters = function () { return [
        { type: ComponentLoaderService },
        { type: OrchestratorService }
    ]; };
    /** @nocollapse */ NgxFeedbackService.ngInjectableDef = i0.defineInjectable({ factory: function NgxFeedbackService_Factory() { return new NgxFeedbackService(i0.inject(i1.ComponentLoaderService), i0.inject(i2.OrchestratorService)); }, token: NgxFeedbackService, providedIn: "root" });
    return NgxFeedbackService;
}());
export { NgxFeedbackService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxFeedbackService.prototype.componentLoader;
    /**
     * @type {?}
     * @private
     */
    NgxFeedbackService.prototype.orchestratorService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZlZWRiYWNrLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZmVlZGJhY2svIiwic291cmNlcyI6WyJsaWIvbmd4LWZlZWRiYWNrLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDN0UsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDakcsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sWUFBWSxDQUFDOzs7O0FBRWpEO0lBSUksNEJBQ3FCLGVBQWdFLEVBQ2hFLG1CQUF3QztRQUR4QyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUQ7UUFDaEUsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtJQUMxRCxDQUFDOzs7O0lBRUosK0NBQWtCOzs7SUFBbEI7UUFDSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUVuRCxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUM7SUFDM0MsQ0FBQzs7Z0JBZEosVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7OztnQkFOUSxzQkFBc0I7Z0JBRXRCLG1CQUFtQjs7OzZCQUg1QjtDQW9CQyxBQWZELElBZUM7U0FaWSxrQkFBa0I7Ozs7OztJQUV2Qiw2Q0FBaUY7Ozs7O0lBQ2pGLGlEQUF5RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbXBvbmVudExvYWRlclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2NvbXBvbmVudC1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBGZWVkYmFja0J1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9mZWVkYmFjay1idXR0b24vZmVlZGJhY2stYnV0dG9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBPcmNoZXN0cmF0b3JTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4RmVlZGJhY2tTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBjb21wb25lbnRMb2FkZXI6IENvbXBvbmVudExvYWRlclNlcnZpY2U8RmVlZGJhY2tCdXR0b25Db21wb25lbnQ+LFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IG9yY2hlc3RyYXRvclNlcnZpY2U6IE9yY2hlc3RyYXRvclNlcnZpY2VcbiAgICApIHt9XG5cbiAgICBsaXN0ZW5Gb3JGZWVkYmFja3MoKSB7XG4gICAgICAgIHRoaXMub3JjaGVzdHJhdG9yU2VydmljZS5uZ09uSW5pdCgpO1xuICAgICAgICB0aGlzLmNvbXBvbmVudExvYWRlci5sb2FkKEZlZWRiYWNrQnV0dG9uQ29tcG9uZW50KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5vcmNoZXN0cmF0b3JTZXJ2aWNlLm9uU2VuZDtcbiAgICB9XG59XG4iXX0=