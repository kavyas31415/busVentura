import { Injectable } from '@angular/core';
import { Observable, Subject, defer, fromEvent, map, shareReplay, takeUntil } from 'rxjs';
import * as i0 from "@angular/core";
export class NguHammerLoader {
    constructor() {
        this._hammer$ = defer(() => import('hammerjs')).pipe(shareReplay({ bufferSize: 1, refCount: true }));
    }
    load() {
        return this._hammer$;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: NguHammerLoader, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: NguHammerLoader, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: NguHammerLoader, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
export class NguCarouselHammerManager {
    constructor(_ngZone, _nguHammerLoader) {
        this._ngZone = _ngZone;
        this._nguHammerLoader = _nguHammerLoader;
        this._destroy$ = new Subject();
    }
    ngOnDestroy() {
        this._destroy$.next();
    }
    createHammer(element) {
        return this._nguHammerLoader.load().pipe(map(() => 
        // Note: The Hammer manager should be created outside of the Angular zone since it sets up
        //       `pointermove` event listener which triggers change detection every time the pointer is moved.
        this._ngZone.runOutsideAngular(() => new Hammer(element))), 
        // Note: the dynamic import is always a microtask which may run after the view is destroyed.
        //       `takeUntil` is used to prevent setting Hammer up if the view had been destroyed before
        //       the HammerJS is loaded.
        takeUntil(this._destroy$));
    }
    on(hammer, event) {
        return fromEvent(hammer, event).pipe(
        // Note: We have to re-enter the Angular zone because Hammer would trigger events outside of the
        //       Angular zone (since we set it up with `runOutsideAngular`).
        enterNgZone(this._ngZone), takeUntil(this._destroy$));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: NguCarouselHammerManager, deps: [{ token: i0.NgZone }, { token: NguHammerLoader }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: NguCarouselHammerManager }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.4", ngImport: i0, type: NguCarouselHammerManager, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i0.NgZone }, { type: NguHammerLoader }] });
function enterNgZone(ngZone) {
    return (source) => new Observable(subscriber => source.subscribe({
        next: value => ngZone.run(() => subscriber.next(value)),
        error: error => ngZone.run(() => subscriber.error(error)),
        complete: () => ngZone.run(() => subscriber.complete())
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd1LWNhcm91c2VsLWhhbW1lci1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3UvY2Fyb3VzZWwvc3JjL2xpYi9uZ3UtY2Fyb3VzZWwvbmd1LWNhcm91c2VsLWhhbW1lci1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBRzFGLE1BQU0sT0FBTyxlQUFlO0lBRDVCO1FBRVUsYUFBUSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3JELFdBQVcsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQy9DLENBQUM7S0FLSDtJQUhDLElBQUk7UUFDRixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQzs4R0FQVSxlQUFlO2tIQUFmLGVBQWUsY0FERixNQUFNOzsyRkFDbkIsZUFBZTtrQkFEM0IsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7O0FBWWxDLE1BQU0sT0FBTyx3QkFBd0I7SUFHbkMsWUFBb0IsT0FBZSxFQUFVLGdCQUFpQztRQUExRCxZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQVUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFpQjtRQUZ0RSxjQUFTLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQUV5QyxDQUFDO0lBRWxGLFdBQVc7UUFDVCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxZQUFZLENBQUMsT0FBb0I7UUFDL0IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUN0QyxHQUFHLENBQUMsR0FBRyxFQUFFO1FBQ1AsMEZBQTBGO1FBQzFGLHNHQUFzRztRQUN0RyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQzFEO1FBQ0QsNEZBQTRGO1FBQzVGLCtGQUErRjtRQUMvRixnQ0FBZ0M7UUFDaEMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FDMUIsQ0FBQztJQUNKLENBQUM7SUFFRCxFQUFFLENBQUMsTUFBcUIsRUFBRSxLQUFhO1FBQ3JDLE9BQU8sU0FBUyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxJQUFJO1FBQ2xDLGdHQUFnRztRQUNoRyxvRUFBb0U7UUFDcEUsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFDekIsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FDMUIsQ0FBQztJQUNKLENBQUM7OEdBOUJVLHdCQUF3QjtrSEFBeEIsd0JBQXdCOzsyRkFBeEIsd0JBQXdCO2tCQURwQyxVQUFVOztBQWtDWCxTQUFTLFdBQVcsQ0FBSSxNQUFjO0lBQ3BDLE9BQU8sQ0FBQyxNQUFxQixFQUFFLEVBQUUsQ0FDL0IsSUFBSSxVQUFVLENBQUksVUFBVSxDQUFDLEVBQUUsQ0FDN0IsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUNmLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2RCxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekQsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ3hELENBQUMsQ0FDSCxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0LCBkZWZlciwgZnJvbUV2ZW50LCBtYXAsIHNoYXJlUmVwbGF5LCB0YWtlVW50aWwgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBOZ3VIYW1tZXJMb2FkZXIge1xuICBwcml2YXRlIF9oYW1tZXIkID0gZGVmZXIoKCkgPT4gaW1wb3J0KCdoYW1tZXJqcycpKS5waXBlKFxuICAgIHNoYXJlUmVwbGF5KHsgYnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IHRydWUgfSlcbiAgKTtcblxuICBsb2FkKCkge1xuICAgIHJldHVybiB0aGlzLl9oYW1tZXIkO1xuICB9XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOZ3VDYXJvdXNlbEhhbW1lck1hbmFnZXIgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwcml2YXRlIF9kZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfbmdab25lOiBOZ1pvbmUsIHByaXZhdGUgX25ndUhhbW1lckxvYWRlcjogTmd1SGFtbWVyTG9hZGVyKSB7fVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuX2Rlc3Ryb3kkLm5leHQoKTtcbiAgfVxuXG4gIGNyZWF0ZUhhbW1lcihlbGVtZW50OiBIVE1MRWxlbWVudCk6IE9ic2VydmFibGU8SGFtbWVyTWFuYWdlcj4ge1xuICAgIHJldHVybiB0aGlzLl9uZ3VIYW1tZXJMb2FkZXIubG9hZCgpLnBpcGUoXG4gICAgICBtYXAoKCkgPT5cbiAgICAgICAgLy8gTm90ZTogVGhlIEhhbW1lciBtYW5hZ2VyIHNob3VsZCBiZSBjcmVhdGVkIG91dHNpZGUgb2YgdGhlIEFuZ3VsYXIgem9uZSBzaW5jZSBpdCBzZXRzIHVwXG4gICAgICAgIC8vICAgICAgIGBwb2ludGVybW92ZWAgZXZlbnQgbGlzdGVuZXIgd2hpY2ggdHJpZ2dlcnMgY2hhbmdlIGRldGVjdGlvbiBldmVyeSB0aW1lIHRoZSBwb2ludGVyIGlzIG1vdmVkLlxuICAgICAgICB0aGlzLl9uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gbmV3IEhhbW1lcihlbGVtZW50KSlcbiAgICAgICksXG4gICAgICAvLyBOb3RlOiB0aGUgZHluYW1pYyBpbXBvcnQgaXMgYWx3YXlzIGEgbWljcm90YXNrIHdoaWNoIG1heSBydW4gYWZ0ZXIgdGhlIHZpZXcgaXMgZGVzdHJveWVkLlxuICAgICAgLy8gICAgICAgYHRha2VVbnRpbGAgaXMgdXNlZCB0byBwcmV2ZW50IHNldHRpbmcgSGFtbWVyIHVwIGlmIHRoZSB2aWV3IGhhZCBiZWVuIGRlc3Ryb3llZCBiZWZvcmVcbiAgICAgIC8vICAgICAgIHRoZSBIYW1tZXJKUyBpcyBsb2FkZWQuXG4gICAgICB0YWtlVW50aWwodGhpcy5fZGVzdHJveSQpXG4gICAgKTtcbiAgfVxuXG4gIG9uKGhhbW1lcjogSGFtbWVyTWFuYWdlciwgZXZlbnQ6IHN0cmluZykge1xuICAgIHJldHVybiBmcm9tRXZlbnQoaGFtbWVyLCBldmVudCkucGlwZShcbiAgICAgIC8vIE5vdGU6IFdlIGhhdmUgdG8gcmUtZW50ZXIgdGhlIEFuZ3VsYXIgem9uZSBiZWNhdXNlIEhhbW1lciB3b3VsZCB0cmlnZ2VyIGV2ZW50cyBvdXRzaWRlIG9mIHRoZVxuICAgICAgLy8gICAgICAgQW5ndWxhciB6b25lIChzaW5jZSB3ZSBzZXQgaXQgdXAgd2l0aCBgcnVuT3V0c2lkZUFuZ3VsYXJgKS5cbiAgICAgIGVudGVyTmdab25lKHRoaXMuX25nWm9uZSksXG4gICAgICB0YWtlVW50aWwodGhpcy5fZGVzdHJveSQpXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbnRlck5nWm9uZTxUPihuZ1pvbmU6IE5nWm9uZSkge1xuICByZXR1cm4gKHNvdXJjZTogT2JzZXJ2YWJsZTxUPikgPT5cbiAgICBuZXcgT2JzZXJ2YWJsZTxUPihzdWJzY3JpYmVyID0+XG4gICAgICBzb3VyY2Uuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogdmFsdWUgPT4gbmdab25lLnJ1bigoKSA9PiBzdWJzY3JpYmVyLm5leHQodmFsdWUpKSxcbiAgICAgICAgZXJyb3I6IGVycm9yID0+IG5nWm9uZS5ydW4oKCkgPT4gc3Vic2NyaWJlci5lcnJvcihlcnJvcikpLFxuICAgICAgICBjb21wbGV0ZTogKCkgPT4gbmdab25lLnJ1bigoKSA9PiBzdWJzY3JpYmVyLmNvbXBsZXRlKCkpXG4gICAgICB9KVxuICAgICk7XG59XG4iXX0=