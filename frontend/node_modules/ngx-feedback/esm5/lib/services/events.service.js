/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
var EventsService = /** @class */ (function () {
    function EventsService() {
        this.feedbackClick = new Subject();
        this.feedbackClickObservable = this.feedbackClick.asObservable();
        this.specificFeedbackClick = new Subject();
        this.specificFeedbackClickObservable = this.specificFeedbackClick.asObservable();
        this.genericFeedbackClick = new Subject();
        this.genericFeedbackClickObservable = this.genericFeedbackClick.asObservable();
        this.closeClick = new Subject();
        this.closeClickClickObservable = this.closeClick.asObservable();
        this.onSendClick = new Subject();
        this.onSendClickObservable = this.onSendClick.asObservable();
    }
    /**
     * @return {?}
     */
    EventsService.prototype.onSpecificFeedbackClick = /**
     * @return {?}
     */
    function () {
        this.specificFeedbackClick.next();
    };
    /**
     * @return {?}
     */
    EventsService.prototype.onGenericFeedbackClik = /**
     * @return {?}
     */
    function () {
        this.genericFeedbackClick.next();
    };
    /**
     * @return {?}
     */
    EventsService.prototype.onFeedbackButtonClick = /**
     * @return {?}
     */
    function () {
        this.feedbackClick.next();
    };
    /**
     * @return {?}
     */
    EventsService.prototype.onCloseClicked = /**
     * @return {?}
     */
    function () {
        this.closeClick.next();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    EventsService.prototype.onSendClicked = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.onSendClick.next(data);
    };
    EventsService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    EventsService.ctorParameters = function () { return []; };
    /** @nocollapse */ EventsService.ngInjectableDef = i0.defineInjectable({ factory: function EventsService_Factory() { return new EventsService(); }, token: EventsService, providedIn: "root" });
    return EventsService;
}());
export { EventsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EventsService.prototype.feedbackClick;
    /** @type {?} */
    EventsService.prototype.feedbackClickObservable;
    /**
     * @type {?}
     * @private
     */
    EventsService.prototype.specificFeedbackClick;
    /** @type {?} */
    EventsService.prototype.specificFeedbackClickObservable;
    /**
     * @type {?}
     * @private
     */
    EventsService.prototype.genericFeedbackClick;
    /** @type {?} */
    EventsService.prototype.genericFeedbackClickObservable;
    /**
     * @type {?}
     * @private
     */
    EventsService.prototype.closeClick;
    /** @type {?} */
    EventsService.prototype.closeClickClickObservable;
    /**
     * @type {?}
     * @private
     */
    EventsService.prototype.onSendClick;
    /** @type {?} */
    EventsService.prototype.onSendClickObservable;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZmVlZGJhY2svIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZXZlbnRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQzs7QUFHM0M7SUFFSTtRQUVRLGtCQUFhLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7UUFDekQsNEJBQXVCLEdBQW9CLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFckUsMEJBQXFCLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7UUFDakUsb0NBQStCLEdBQW9CLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUVyRix5QkFBb0IsR0FBaUIsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQUNoRSxtQ0FBOEIsR0FBb0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBRW5GLGVBQVUsR0FBaUIsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQUN0RCw4QkFBeUIsR0FBb0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUVwRSxnQkFBVyxHQUFpQixJQUFJLE9BQU8sRUFBZ0IsQ0FBQztRQUNoRSwwQkFBcUIsR0FBNkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQWZuRSxDQUFDOzs7O0lBaUJoQiwrQ0FBdUI7OztJQUF2QjtRQUNJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QyxDQUFDOzs7O0lBRUQsNkNBQXFCOzs7SUFBckI7UUFDSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDckMsQ0FBQzs7OztJQUNELDZDQUFxQjs7O0lBQXJCO1FBQ0ksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM5QixDQUFDOzs7O0lBRUQsc0NBQWM7OztJQUFkO1FBQ0ksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7OztJQUVELHFDQUFhOzs7O0lBQWIsVUFBYyxJQUFrQjtRQUM1QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDOztnQkFwQ0osVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7Ozs7d0JBSmxDO0NBeUNDLEFBckNELElBcUNDO1NBcENZLGFBQWE7Ozs7OztJQUd0QixzQ0FBeUQ7O0lBQ3pELGdEQUE2RTs7Ozs7SUFFN0UsOENBQWlFOztJQUNqRSx3REFBNkY7Ozs7O0lBRTdGLDZDQUFnRTs7SUFDaEUsdURBQTJGOzs7OztJQUUzRixtQ0FBc0Q7O0lBQ3RELGtEQUE0RTs7Ozs7SUFFNUUsb0NBQWdFOztJQUNoRSw4Q0FBa0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgRmVlZGJhY2tEYXRhIH0gZnJvbSAnLi4vbW9kZWxzL2ZlZWRiYWNrLWRhdGEubW9kZWwnO1xyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIEV2ZW50c1NlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICAgIHByaXZhdGUgZmVlZGJhY2tDbGljazogU3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gICAgZmVlZGJhY2tDbGlja09ic2VydmFibGU6IE9ic2VydmFibGU8YW55PiA9IHRoaXMuZmVlZGJhY2tDbGljay5hc09ic2VydmFibGUoKTtcclxuXHJcbiAgICBwcml2YXRlIHNwZWNpZmljRmVlZGJhY2tDbGljazogU3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gICAgc3BlY2lmaWNGZWVkYmFja0NsaWNrT2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxhbnk+ID0gdGhpcy5zcGVjaWZpY0ZlZWRiYWNrQ2xpY2suYXNPYnNlcnZhYmxlKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBnZW5lcmljRmVlZGJhY2tDbGljazogU3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gICAgZ2VuZXJpY0ZlZWRiYWNrQ2xpY2tPYnNlcnZhYmxlOiBPYnNlcnZhYmxlPGFueT4gPSB0aGlzLmdlbmVyaWNGZWVkYmFja0NsaWNrLmFzT2JzZXJ2YWJsZSgpO1xyXG5cclxuICAgIHByaXZhdGUgY2xvc2VDbGljazogU3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gICAgY2xvc2VDbGlja0NsaWNrT2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxhbnk+ID0gdGhpcy5jbG9zZUNsaWNrLmFzT2JzZXJ2YWJsZSgpO1xyXG5cclxuICAgIHByaXZhdGUgb25TZW5kQ2xpY2s6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0PEZlZWRiYWNrRGF0YT4oKTtcclxuICAgIG9uU2VuZENsaWNrT2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxGZWVkYmFja0RhdGE+ID0gdGhpcy5vblNlbmRDbGljay5hc09ic2VydmFibGUoKTtcclxuXHJcbiAgICBvblNwZWNpZmljRmVlZGJhY2tDbGljaygpIHtcclxuICAgICAgICB0aGlzLnNwZWNpZmljRmVlZGJhY2tDbGljay5uZXh0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25HZW5lcmljRmVlZGJhY2tDbGlrKCkge1xyXG4gICAgICAgIHRoaXMuZ2VuZXJpY0ZlZWRiYWNrQ2xpY2submV4dCgpO1xyXG4gICAgfVxyXG4gICAgb25GZWVkYmFja0J1dHRvbkNsaWNrKCkge1xyXG4gICAgICAgIHRoaXMuZmVlZGJhY2tDbGljay5uZXh0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DbG9zZUNsaWNrZWQoKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZUNsaWNrLm5leHQoKTtcclxuICAgIH1cclxuXHJcbiAgICBvblNlbmRDbGlja2VkKGRhdGE6IEZlZWRiYWNrRGF0YSkge1xyXG4gICAgICAgIHRoaXMub25TZW5kQ2xpY2submV4dChkYXRhKTtcclxuICAgIH1cclxufVxyXG4iXX0=