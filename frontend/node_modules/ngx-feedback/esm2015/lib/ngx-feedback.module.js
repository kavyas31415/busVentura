/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { FeedbackButtonComponent } from './components/feedback-button/feedback-button.component';
import { ModalComponent } from './components/modal/modal.component';
import { ComponentLoaderService } from './services/component-loader.service';
import { ModalService } from './services/modal.service';
import { NgxFeedbackService } from './ngx-feedback.service';
import { CommonModule } from '@angular/common';
import { SelectorsService } from './services/selectors.service';
import { ButtonComponent } from './components/button/button.component';
import { BackdropComponent } from './components/backdrop/backdrop.component';
import { OrchestratorService } from './services/orchestrator.service';
import { EventsService } from './services/events.service';
import { StarComponent } from './components/star/star.component';
import { StarVoteComponent } from './components/star-vote/star-vote.component';
export class NgxFeedbackModule {
}
NgxFeedbackModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FeedbackButtonComponent,
                    ModalComponent,
                    ButtonComponent,
                    BackdropComponent,
                    StarComponent,
                    StarVoteComponent,
                ],
                entryComponents: [FeedbackButtonComponent, ModalComponent, BackdropComponent],
                providers: [NgxFeedbackService, OrchestratorService, ComponentLoaderService, ModalService, SelectorsService, EventsService],
                imports: [CommonModule],
                exports: []
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZlZWRiYWNrLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mZWVkYmFjay8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtZmVlZGJhY2subW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQ2pHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN0RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBZ0IvRSxNQUFNLE9BQU8saUJBQWlCOzs7WUFkN0IsUUFBUSxTQUFDO2dCQUNOLFlBQVksRUFBRTtvQkFDVix1QkFBdUI7b0JBQ3ZCLGNBQWM7b0JBQ2QsZUFBZTtvQkFDZixpQkFBaUI7b0JBQ2pCLGFBQWE7b0JBQ2IsaUJBQWlCO2lCQUNwQjtnQkFDRCxlQUFlLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxjQUFjLEVBQUUsaUJBQWlCLENBQUM7Z0JBQzdFLFNBQVMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLG1CQUFtQixFQUFFLHNCQUFzQixFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLENBQUM7Z0JBQzNILE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztnQkFDdkIsT0FBTyxFQUFFLEVBQUU7YUFDZCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGZWVkYmFja0J1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9mZWVkYmFjay1idXR0b24vZmVlZGJhY2stYnV0dG9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNb2RhbENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9tb2RhbC9tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29tcG9uZW50TG9hZGVyU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvY29tcG9uZW50LWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IE1vZGFsU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvbW9kYWwuc2VydmljZSc7XG5pbXBvcnQgeyBOZ3hGZWVkYmFja1NlcnZpY2UgfSBmcm9tICcuL25neC1mZWVkYmFjay5zZXJ2aWNlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBTZWxlY3RvcnNTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9zZWxlY3RvcnMuc2VydmljZSc7XG5pbXBvcnQgeyBCdXR0b25Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvYnV0dG9uL2J1dHRvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgQmFja2Ryb3BDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvYmFja2Ryb3AvYmFja2Ryb3AuY29tcG9uZW50JztcbmltcG9ydCB7IE9yY2hlc3RyYXRvclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL29yY2hlc3RyYXRvci5zZXJ2aWNlJztcbmltcG9ydCB7IEV2ZW50c1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2V2ZW50cy5zZXJ2aWNlJztcbmltcG9ydCB7IFN0YXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvc3Rhci9zdGFyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdGFyVm90ZUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9zdGFyLXZvdGUvc3Rhci12b3RlLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgIEZlZWRiYWNrQnV0dG9uQ29tcG9uZW50LFxuICAgICAgICBNb2RhbENvbXBvbmVudCxcbiAgICAgICAgQnV0dG9uQ29tcG9uZW50LFxuICAgICAgICBCYWNrZHJvcENvbXBvbmVudCxcbiAgICAgICAgU3RhckNvbXBvbmVudCxcbiAgICAgICAgU3RhclZvdGVDb21wb25lbnQsXG4gICAgXSxcbiAgICBlbnRyeUNvbXBvbmVudHM6IFtGZWVkYmFja0J1dHRvbkNvbXBvbmVudCwgTW9kYWxDb21wb25lbnQsIEJhY2tkcm9wQ29tcG9uZW50XSxcbiAgICBwcm92aWRlcnM6IFtOZ3hGZWVkYmFja1NlcnZpY2UsIE9yY2hlc3RyYXRvclNlcnZpY2UsIENvbXBvbmVudExvYWRlclNlcnZpY2UsIE1vZGFsU2VydmljZSwgU2VsZWN0b3JzU2VydmljZSwgRXZlbnRzU2VydmljZV0sXG4gICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gICAgZXhwb3J0czogW11cbn0pXG5leHBvcnQgY2xhc3MgTmd4RmVlZGJhY2tNb2R1bGUge31cbiJdfQ==