{"version":3,"sources":["ng://ngx-feedback/lib/services/component-loader.service.ts","ng://ngx-feedback/lib/services/events.service.ts","ng://ngx-feedback/lib/components/feedback-button/feedback-button.component.ts","ng://ngx-feedback/lib/components/modal/modal.component.ts","ng://ngx-feedback/lib/components/backdrop/backdrop.component.ts","ng://ngx-feedback/lib/services/modal.service.ts","ng://ngx-feedback/lib/services/selectors.service.ts","ng://ngx-feedback/lib/services/orchestrator.service.ts","ng://ngx-feedback/lib/ngx-feedback.service.ts","ng://ngx-feedback/lib/components/button/button.component.ts","ng://ngx-feedback/lib/components/star/star.component.ts","ng://ngx-feedback/lib/components/star-vote/star-vote.component.ts","ng://ngx-feedback/lib/ngx-feedback.module.ts","ng://ngx-feedback/lib/models/feedback-data.model.ts"],"names":["ComponentLoaderService","componentFactoryResolver","appRef","injector","this","prototype","load","componentType","ref","resolveComponentFactory","create","attachView","hostView","domElem","rootNodes","document","body","appendChild","changeDetectorRef","detectChanges","Injectable","args","providedIn","ComponentFactoryResolver","ApplicationRef","Injector","EventsService","feedbackClick","Subject","feedbackClickObservable","asObservable","specificFeedbackClick","specificFeedbackClickObservable","genericFeedbackClick","genericFeedbackClickObservable","closeClick","closeClickClickObservable","onSendClick","onSendClickObservable","onSpecificFeedbackClick","next","onGenericFeedbackClik","onFeedbackButtonClick","onCloseClicked","onSendClicked","data","FeedbackButtonComponent","eventsService","ngOnInit","onClick","Component","selector","template","encapsulation","ViewEncapsulation","None","ModalComponent","imgSrc","formData","rate","comment","screenshot","onSpecific","onGeneric","setPreview","preview","onVote","voted","onSend","_this","nativeElement","value","thanks","setTimeout","ViewChild","BackdropComponent","click","EventEmitter","emit","Output","ModalService","componentLoader","openWithPreview","draw","modalRef","instance","backdropRef","remove","destroy","SelectorsService","rendererFactory","subs","renderer","createRenderer","pageScreenshot","elementsHighlight","element","elements","source","fromEvent","subscribe","ev","removeClass","elementFromPoint","x","y","findIndex","el","push","evt","stopPropagation","addClass","image","html2canvas","then","canvas","toDataURL","clean","unsubscribe","forEach","sub","RendererFactory2","OrchestratorService","modalService","selectorsService","subscriptions","onGenericFeedbackClick","onElementSelected","onCloseClick","prev","ngOnDestroy","NgxFeedbackService","orchestratorService","listenForFeedbacks","ButtonComponent","StarComponent","Input","StarVoteComponent","stars","type","index","s","i","onMouseEnter","onMouseLeave","NgxFeedbackModule","NgModule","declarations","entryComponents","providers","imports","CommonModule","exports","FeedbackData"],"mappings":"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","sourcesContent":["import {\r\n    Injectable,\r\n    Type,\r\n    ComponentRef,\r\n    ComponentFactoryResolver,\r\n    ApplicationRef,\r\n    Injector,\r\n    EmbeddedViewRef\r\n} from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ComponentLoaderService<T> {\r\n    constructor(\r\n        private readonly componentFactoryResolver: ComponentFactoryResolver,\r\n        private appRef: ApplicationRef,\r\n        private injector: Injector\r\n    ) {}\r\n    load(componentType: Type<T>): ComponentRef<T> {\r\n        // 1. Create a component reference from the component\r\n        const ref: ComponentRef<T> = this.componentFactoryResolver.resolveComponentFactory(componentType).create(this.injector);\r\n\r\n        // 2. Attach component to the appRef so that it's inside the ng component tree\r\n        this.appRef.attachView(ref.hostView);\r\n\r\n        // 3. Get DOM element from component\r\n        const domElem = (ref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n\r\n        // 4. Append DOM element to the body\r\n        document.body.appendChild(domElem);\r\n        ref.changeDetectorRef.detectChanges();\r\n\r\n        return ref;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { FeedbackData } from '../models/feedback-data.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class EventsService {\r\n    constructor() {}\r\n\r\n    private feedbackClick: Subject<any> = new Subject<any>();\r\n    feedbackClickObservable: Observable<any> = this.feedbackClick.asObservable();\r\n\r\n    private specificFeedbackClick: Subject<any> = new Subject<any>();\r\n    specificFeedbackClickObservable: Observable<any> = this.specificFeedbackClick.asObservable();\r\n\r\n    private genericFeedbackClick: Subject<any> = new Subject<any>();\r\n    genericFeedbackClickObservable: Observable<any> = this.genericFeedbackClick.asObservable();\r\n\r\n    private closeClick: Subject<any> = new Subject<any>();\r\n    closeClickClickObservable: Observable<any> = this.closeClick.asObservable();\r\n\r\n    private onSendClick: Subject<any> = new Subject<FeedbackData>();\r\n    onSendClickObservable: Observable<FeedbackData> = this.onSendClick.asObservable();\r\n\r\n    onSpecificFeedbackClick() {\r\n        this.specificFeedbackClick.next();\r\n    }\r\n\r\n    onGenericFeedbackClik() {\r\n        this.genericFeedbackClick.next();\r\n    }\r\n    onFeedbackButtonClick() {\r\n        this.feedbackClick.next();\r\n    }\r\n\r\n    onCloseClicked() {\r\n        this.closeClick.next();\r\n    }\r\n\r\n    onSendClicked(data: FeedbackData) {\r\n        this.onSendClick.next(data);\r\n    }\r\n}\r\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { EventsService } from '../../services/events.service';\n\n@Component({\n    selector: 'ngx-feedback-main-btn',\n    templateUrl: './feedback-button.component.html',\n    styleUrls: ['./feedback-button.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class FeedbackButtonComponent implements OnInit {\n    constructor(private eventsService: EventsService) {}\n\n    ngOnInit() {}\n    onClick() {\n        this.eventsService.onFeedbackButtonClick();\n    }\n}\n","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { FeedbackData } from '../../models/feedback-data.model';\nimport { EventsService } from '../../services/events.service';\n\n@Component({\n    selector: 'ngx-feedback-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.component.scss']\n})\nexport class ModalComponent implements OnInit {\n    imgSrc = '';\n    enterSpecific: boolean;\n    enterGeneric: boolean;\n    voted: boolean;\n    thanks: boolean;\n\n    @ViewChild('comment') comment: ElementRef;\n\n    private formData: FeedbackData = { rate: 0, comment: '', screenshot: null } as FeedbackData;\n    constructor(private readonly eventsService: EventsService) {}\n\n    ngOnInit() {}\n    onSpecific() {\n        this.eventsService.onSpecificFeedbackClick();\n    }\n\n    onGeneric() {\n        this.eventsService.onGenericFeedbackClik();\n    }\n\n    onCloseClicked() {\n        this.eventsService.onCloseClicked();\n    }\n\n    setPreview(preview: any) {\n        this.imgSrc = preview;\n        this.formData.screenshot = preview;\n    }\n\n    onVote(rate: number) {\n        this.voted = true;\n        this.formData.rate = rate;\n    }\n\n    onSend() {\n        this.formData.comment = this.comment.nativeElement.value;\n        this.eventsService.onSendClicked(this.formData);\n        this.thanks = true;\n        setTimeout(() => {\n            this.eventsService.onCloseClicked();\n        }, 2000);\n    }\n}\n","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\n\n@Component({\n    selector: 'ngx-feedback-backdrop',\n    templateUrl: './backdrop.component.html',\n    styleUrls: ['./backdrop.component.scss']\n})\nexport class BackdropComponent implements OnInit {\n    @Output()\n    click: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor() {}\n\n    ngOnInit() {}\n\n    onClick() {\n        this.click.emit();\n    }\n}\n","import { Injectable, ComponentRef } from '@angular/core';\r\nimport { ComponentLoaderService } from './component-loader.service';\r\nimport { ModalComponent } from '../components/modal/modal.component';\r\nimport { BackdropComponent } from '../components/backdrop/backdrop.component';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ModalService {\r\n    private modalRef: ComponentRef<ModalComponent>;\r\n    private backdropRef: ComponentRef<BackdropComponent>;\r\n\r\n    constructor(private readonly componentLoader: ComponentLoaderService<any>) {}\r\n\r\n    openWithPreview(preview: any) {\r\n        this.draw();\r\n        this.modalRef.instance.setPreview(preview);\r\n    }\r\n    draw() {\r\n        this.backdropRef = this.componentLoader.load(BackdropComponent);\r\n        this.modalRef = this.componentLoader.load(ModalComponent);\r\n    }\r\n\r\n    remove() {\r\n        this.modalRef.destroy();\r\n        this.backdropRef.destroy();\r\n    }\r\n}\r\n","import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';\r\nimport { fromEvent, Subscription, Subject } from 'rxjs';\r\nimport html2canvas from 'html2canvas';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SelectorsService {\r\n    preview: Subject<any> = new Subject();\r\n    subs: Subscription[] = [];\r\n\r\n    source: Subscription;\r\n\r\n    private renderer: Renderer2;\r\n\r\n    constructor(private readonly rendererFactory: RendererFactory2) {\r\n        this.renderer = this.rendererFactory.createRenderer(null, null);\r\n    }\r\n\r\n    pageScreenshot() {\r\n        this.screenshot(document.body);\r\n    }\r\n    elementsHighlight() {\r\n        let element: Element;\r\n        const elements = [];\r\n        this.source = fromEvent(document, 'mousemove').subscribe((ev: MouseEvent) => {\r\n            if (element) {\r\n                this.renderer.removeClass(element, 'ngx-feedback__highlight');\r\n            }\r\n            element = document.elementFromPoint(ev.x, ev.y);\r\n            if (elements.findIndex(el => el === element) === -1) {\r\n                elements.push(element);\r\n                this.subs.push(\r\n                    fromEvent(element, 'click').subscribe((evt: MouseEvent) => {\r\n                        evt.stopPropagation();\r\n                        this.screenshot(element);\r\n                    })\r\n                );\r\n            }\r\n            this.renderer.addClass(element, 'ngx-feedback__highlight');\r\n        });\r\n    }\r\n\r\n    screenshot(element: any) {\r\n        let image;\r\n        html2canvas(element).then(canvas => {\r\n            image = (canvas as HTMLCanvasElement).toDataURL();\r\n            this.preview.next(image);\r\n        });\r\n        this.renderer.removeClass(element, 'ngx-feedback__highlight');\r\n\r\n        this.clean();\r\n    }\r\n\r\n    clean() {\r\n        if (this.source) {\r\n            this.source.unsubscribe();\r\n        }\r\n        this.subs.forEach(sub => sub.unsubscribe());\r\n    }\r\n}\r\n","import { Injectable, OnInit, OnDestroy } from '@angular/core';\r\nimport { ModalService } from './modal.service';\r\nimport { SelectorsService } from './selectors.service';\r\nimport { EventsService } from './events.service';\r\nimport { Subscription, Subject } from 'rxjs';\r\nimport { FeedbackData } from '../models/feedback-data.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OrchestratorService implements OnInit, OnDestroy {\r\n    private subscriptions: Subscription[] = [];\r\n\r\n    onSend: Subject<FeedbackData> = new Subject<FeedbackData>();\r\n    constructor(\r\n        private readonly modalService: ModalService,\r\n        private readonly selectorsService: SelectorsService,\r\n        private readonly eventsService: EventsService\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.subscriptions.push(\r\n            this.onFeedbackButtonClick(),\r\n            this.onSpecificFeedbackClick(),\r\n            this.onGenericFeedbackClick(),\r\n            this.onElementSelected(),\r\n            this.onCloseClick(),\r\n            this.onSendClick()\r\n        );\r\n    }\r\n\r\n    private onElementSelected() {\r\n        return this.selectorsService.preview.subscribe(prev => {\r\n            this.modalService.openWithPreview(prev);\r\n        });\r\n    }\r\n\r\n    private onFeedbackButtonClick() {\r\n        return this.eventsService.feedbackClickObservable.subscribe(() => {\r\n            this.modalService.draw();\r\n        });\r\n    }\r\n\r\n    private onSpecificFeedbackClick() {\r\n        return this.eventsService.specificFeedbackClickObservable.subscribe(() => {\r\n            this.modalService.remove();\r\n            this.selectorsService.elementsHighlight();\r\n        });\r\n    }\r\n\r\n    private onGenericFeedbackClick() {\r\n        return this.eventsService.genericFeedbackClickObservable.subscribe(() => {\r\n            this.modalService.remove();\r\n            this.selectorsService.pageScreenshot();\r\n        });\r\n    }\r\n\r\n    private onCloseClick() {\r\n        return this.eventsService.closeClickClickObservable.subscribe(() => {\r\n            this.modalService.remove();\r\n        });\r\n    }\r\n\r\n    private onSendClick() {\r\n        return this.eventsService.onSendClickObservable.subscribe((data: FeedbackData) => {\r\n            this.onSend.next(data);\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(sub => {\r\n            sub.unsubscribe();\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { ComponentLoaderService } from './services/component-loader.service';\nimport { FeedbackButtonComponent } from './components/feedback-button/feedback-button.component';\nimport { OrchestratorService } from './services';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxFeedbackService {\n    constructor(\n        private readonly componentLoader: ComponentLoaderService<FeedbackButtonComponent>,\n        private readonly orchestratorService: OrchestratorService\n    ) {}\n\n    listenForFeedbacks() {\n        this.orchestratorService.ngOnInit();\n        this.componentLoader.load(FeedbackButtonComponent);\n\n        return this.orchestratorService.onSend;\n    }\n}\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'ngx-feedback-btn',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent implements OnInit {\n    @Output()\n    click: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor() {}\n\n    ngOnInit() {}\n\n    onClick() {\n        this.click.emit();\n    }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'ngx-feedback-star',\n    templateUrl: './star.component.html',\n    styleUrls: ['./star.component.scss']\n})\nexport class StarComponent implements OnInit {\n    @Input()\n    type: 'full' | 'empty' | 'temp';\n\n    @Output()\n    click: EventEmitter<any> = new EventEmitter();\n    constructor() {}\n\n    ngOnInit() {}\n\n    onClick() {\n        this.click.emit();\n    }\n}\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'ngx-feedback-star-vote',\n    templateUrl: './star-vote.component.html',\n    styleUrls: ['./star-vote.component.scss']\n})\nexport class StarVoteComponent implements OnInit {\n    stars: any[] = [\n        { type: 'empty', value: 1 },\n        { type: 'empty', value: 2 },\n        { type: 'empty', value: 3 },\n        { type: 'empty', value: 4 },\n        { type: 'empty', value: 5 }\n    ];\n\n    @Output()\n    voted: EventEmitter<number> = new EventEmitter<number>();\n\n    constructor() {}\n\n    ngOnInit() {}\n\n    onClick(index: number) {\n        this.stars.forEach((s, i) => {\n            if (i <= index) {\n                s.type = 'full';\n            } else {\n                s.type = 'empty';\n            }\n        });\n        this.voted.emit(index + 1);\n    }\n\n    onMouseEnter(index: number) {\n        this.stars.forEach((s, i) => {\n            if (i <= index && s.type !== 'full') {\n                s.type = 'temp';\n            }\n        });\n    }\n\n    onMouseLeave(index: number) {\n        this.stars.forEach((s, i) => {\n            if (s.type === 'temp') {\n                s.type = 'empty';\n            }\n        });\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { FeedbackButtonComponent } from './components/feedback-button/feedback-button.component';\nimport { ModalComponent } from './components/modal/modal.component';\nimport { ComponentLoaderService } from './services/component-loader.service';\nimport { ModalService } from './services/modal.service';\nimport { NgxFeedbackService } from './ngx-feedback.service';\nimport { CommonModule } from '@angular/common';\nimport { SelectorsService } from './services/selectors.service';\nimport { ButtonComponent } from './components/button/button.component';\nimport { BackdropComponent } from './components/backdrop/backdrop.component';\nimport { OrchestratorService } from './services/orchestrator.service';\nimport { EventsService } from './services/events.service';\nimport { StarComponent } from './components/star/star.component';\nimport { StarVoteComponent } from './components/star-vote/star-vote.component';\n\n@NgModule({\n    declarations: [\n        FeedbackButtonComponent,\n        ModalComponent,\n        ButtonComponent,\n        BackdropComponent,\n        StarComponent,\n        StarVoteComponent,\n    ],\n    entryComponents: [FeedbackButtonComponent, ModalComponent, BackdropComponent],\n    providers: [NgxFeedbackService, OrchestratorService, ComponentLoaderService, ModalService, SelectorsService, EventsService],\n    imports: [CommonModule],\n    exports: []\n})\nexport class NgxFeedbackModule {}\n","export class FeedbackData {\r\n    rate: number;\r\n    comment: string;\r\n    screenshot: any;\r\n}\r\n"]}