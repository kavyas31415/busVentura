/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter } from '@angular/core';
var StarVoteComponent = /** @class */ (function () {
    function StarVoteComponent() {
        this.stars = [
            { type: 'empty', value: 1 },
            { type: 'empty', value: 2 },
            { type: 'empty', value: 3 },
            { type: 'empty', value: 4 },
            { type: 'empty', value: 5 }
        ];
        this.voted = new EventEmitter();
    }
    /**
     * @return {?}
     */
    StarVoteComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} index
     * @return {?}
     */
    StarVoteComponent.prototype.onClick = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.stars.forEach((/**
         * @param {?} s
         * @param {?} i
         * @return {?}
         */
        function (s, i) {
            if (i <= index) {
                s.type = 'full';
            }
            else {
                s.type = 'empty';
            }
        }));
        this.voted.emit(index + 1);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    StarVoteComponent.prototype.onMouseEnter = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.stars.forEach((/**
         * @param {?} s
         * @param {?} i
         * @return {?}
         */
        function (s, i) {
            if (i <= index && s.type !== 'full') {
                s.type = 'temp';
            }
        }));
    };
    /**
     * @param {?} index
     * @return {?}
     */
    StarVoteComponent.prototype.onMouseLeave = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.stars.forEach((/**
         * @param {?} s
         * @param {?} i
         * @return {?}
         */
        function (s, i) {
            if (s.type === 'temp') {
                s.type = 'empty';
            }
        }));
    };
    StarVoteComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-feedback-star-vote',
                    template: "<div class=\"ngx-feedback-star-vote__container\">\n    <div class=\"ngx-feedback-star-vote__star\" *ngFor=\"let s of stars; index as i\">\n        <ngx-feedback-star\n            (click)=\"onClick(i)\"\n            (mouseenter)=\"onMouseEnter(i)\"\n            (mouseleave)=\"onMouseLeave(i)\"\n            [type]=\"s.type\"\n        ></ngx-feedback-star>\n    </div>\n</div>\n",
                    styles: [".ngx-feedback-star-vote__container{display:flex;flex-direction:row;justify-content:center;padding:10px}"]
                }] }
    ];
    /** @nocollapse */
    StarVoteComponent.ctorParameters = function () { return []; };
    StarVoteComponent.propDecorators = {
        voted: [{ type: Output }]
    };
    return StarVoteComponent;
}());
export { StarVoteComponent };
if (false) {
    /** @type {?} */
    StarVoteComponent.prototype.stars;
    /** @type {?} */
    StarVoteComponent.prototype.voted;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhci12b3RlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mZWVkYmFjay8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3N0YXItdm90ZS9zdGFyLXZvdGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEU7SUFpQkk7UUFYQSxVQUFLLEdBQVU7WUFDWCxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUMzQixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUMzQixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUMzQixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtZQUMzQixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtTQUM5QixDQUFDO1FBR0YsVUFBSyxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO0lBRTFDLENBQUM7Ozs7SUFFaEIsb0NBQVE7OztJQUFSLGNBQVksQ0FBQzs7Ozs7SUFFYixtQ0FBTzs7OztJQUFQLFVBQVEsS0FBYTtRQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU87Ozs7O1FBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQztZQUNwQixJQUFJLENBQUMsSUFBSSxLQUFLLEVBQUU7Z0JBQ1osQ0FBQyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7YUFDbkI7aUJBQU07Z0JBQ0gsQ0FBQyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUM7YUFDcEI7UUFDTCxDQUFDLEVBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMvQixDQUFDOzs7OztJQUVELHdDQUFZOzs7O0lBQVosVUFBYSxLQUFhO1FBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTzs7Ozs7UUFBQyxVQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTtnQkFDakMsQ0FBQyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7YUFDbkI7UUFDTCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7O0lBRUQsd0NBQVk7Ozs7SUFBWixVQUFhLEtBQWE7UUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPOzs7OztRQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUM7WUFDcEIsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTtnQkFDbkIsQ0FBQyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUM7YUFDcEI7UUFDTCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7O2dCQTlDSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLHdCQUF3QjtvQkFDbEMscVlBQXlDOztpQkFFNUM7Ozs7O3dCQVVJLE1BQU07O0lBaUNYLHdCQUFDO0NBQUEsQUEvQ0QsSUErQ0M7U0ExQ1ksaUJBQWlCOzs7SUFDMUIsa0NBTUU7O0lBRUYsa0NBQ3lEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbmd4LWZlZWRiYWNrLXN0YXItdm90ZScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3N0YXItdm90ZS5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vc3Rhci12b3RlLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgU3RhclZvdGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHN0YXJzOiBhbnlbXSA9IFtcbiAgICAgICAgeyB0eXBlOiAnZW1wdHknLCB2YWx1ZTogMSB9LFxuICAgICAgICB7IHR5cGU6ICdlbXB0eScsIHZhbHVlOiAyIH0sXG4gICAgICAgIHsgdHlwZTogJ2VtcHR5JywgdmFsdWU6IDMgfSxcbiAgICAgICAgeyB0eXBlOiAnZW1wdHknLCB2YWx1ZTogNCB9LFxuICAgICAgICB7IHR5cGU6ICdlbXB0eScsIHZhbHVlOiA1IH1cbiAgICBdO1xuXG4gICAgQE91dHB1dCgpXG4gICAgdm90ZWQ6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHt9XG5cbiAgICBvbkNsaWNrKGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zdGFycy5mb3JFYWNoKChzLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoaSA8PSBpbmRleCkge1xuICAgICAgICAgICAgICAgIHMudHlwZSA9ICdmdWxsJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcy50eXBlID0gJ2VtcHR5JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudm90ZWQuZW1pdChpbmRleCArIDEpO1xuICAgIH1cblxuICAgIG9uTW91c2VFbnRlcihpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuc3RhcnMuZm9yRWFjaCgocywgaSkgPT4ge1xuICAgICAgICAgICAgaWYgKGkgPD0gaW5kZXggJiYgcy50eXBlICE9PSAnZnVsbCcpIHtcbiAgICAgICAgICAgICAgICBzLnR5cGUgPSAndGVtcCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uTW91c2VMZWF2ZShpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuc3RhcnMuZm9yRWFjaCgocywgaSkgPT4ge1xuICAgICAgICAgICAgaWYgKHMudHlwZSA9PT0gJ3RlbXAnKSB7XG4gICAgICAgICAgICAgICAgcy50eXBlID0gJ2VtcHR5JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19