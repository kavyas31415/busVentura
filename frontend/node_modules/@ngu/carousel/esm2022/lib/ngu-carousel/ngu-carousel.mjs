import { signal } from '@angular/core';
export class NguCarouselStore {
    constructor(touch = new Touch(), vertical = new Vertical(), interval, transform = new Transfrom(), button, visibleItems, deviceType, type = 'fixed', token = '', items = 0, load = 0, deviceWidth = 0, carouselWidth = 0, itemWidth = 0, slideItems = 0, itemWidthPer = 0, itemLength = 0, currentSlide = 0, easing = 'cubic-bezier(0, 0, 0.2, 1)', speed = 200, loop = false, dexVal = 0, touchTransform = 0, isEnd = false, isFirst = signal(true), isLast = signal(false), RTL = false, point = true, velocity = 1) {
        this.touch = touch;
        this.vertical = vertical;
        this.interval = interval;
        this.transform = transform;
        this.button = button;
        this.visibleItems = visibleItems;
        this.deviceType = deviceType;
        this.type = type;
        this.token = token;
        this.items = items;
        this.load = load;
        this.deviceWidth = deviceWidth;
        this.carouselWidth = carouselWidth;
        this.itemWidth = itemWidth;
        this.slideItems = slideItems;
        this.itemWidthPer = itemWidthPer;
        this.itemLength = itemLength;
        this.currentSlide = currentSlide;
        this.easing = easing;
        this.speed = speed;
        this.loop = loop;
        this.dexVal = dexVal;
        this.touchTransform = touchTransform;
        this.isEnd = isEnd;
        this.isFirst = isFirst;
        this.isLast = isLast;
        this.RTL = RTL;
        this.point = point;
        this.velocity = velocity;
    }
}
export class ItemsControl {
}
export class Vertical {
}
export class NguButton {
}
export class Touch {
}
// This is misspelled. Must be changed to `Transform`.
export class Transfrom {
    constructor(xs = 0, sm = 0, md = 0, lg = 0, all = 0) {
        this.xs = xs;
        this.sm = sm;
        this.md = md;
        this.lg = lg;
        this.all = all;
        this.xl = 0;
    }
}
/**
 * Default values
 * {sm: 768, md: 992, lg: 1200, xl: 1200}
 *
 * Bootstrap values:
 * {sm: 576, md: 768, lg: 992, xl: 1200}
 */
export class Breakpoints {
    constructor(sm = 768, md = 992, lg = 1200, xl = 1200) {
        this.sm = sm;
        this.md = md;
        this.lg = lg;
        this.xl = xl;
    }
}
export class NguCarouselConfig {
}
export class NguCarouselOutletContext {
    constructor(data) {
        this.$implicit = data;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd1LWNhcm91c2VsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3UvY2Fyb3VzZWwvc3JjL2xpYi9uZ3UtY2Fyb3VzZWwvbmd1LWNhcm91c2VsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkMsTUFBTSxPQUFPLGdCQUFnQjtJQUMzQixZQUNTLFFBQVEsSUFBSSxLQUFLLEVBQUUsRUFDbkIsV0FBVyxJQUFJLFFBQVEsRUFBRSxFQUN6QixRQUEyQixFQUMzQixZQUFZLElBQUksU0FBUyxFQUFFLEVBQzNCLE1BQWtCLEVBQ2xCLFlBQTJCLEVBQzNCLFVBQXVCLEVBQ3ZCLE9BQU8sT0FBTyxFQUNkLFFBQVEsRUFBRSxFQUNWLFFBQVEsQ0FBQyxFQUNULE9BQU8sQ0FBQyxFQUNSLGNBQWMsQ0FBQyxFQUNmLGdCQUFnQixDQUFDLEVBQ2pCLFlBQVksQ0FBQyxFQUNiLGFBQWEsQ0FBQyxFQUNkLGVBQWUsQ0FBQyxFQUNoQixhQUFhLENBQUMsRUFDZCxlQUFlLENBQUMsRUFDaEIsU0FBUyw0QkFBNEIsRUFDckMsUUFBUSxHQUFHLEVBQ1gsT0FBTyxLQUFLLEVBQ1osU0FBUyxDQUFDLEVBQ1YsaUJBQWlCLENBQUMsRUFDbEIsUUFBUSxLQUFLLEVBQ0osVUFBVSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQ3RCLFNBQVMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUMvQixNQUFNLEtBQUssRUFDWCxRQUFRLElBQUksRUFDWixXQUFXLENBQUM7UUE1QlosVUFBSyxHQUFMLEtBQUssQ0FBYztRQUNuQixhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUN6QixhQUFRLEdBQVIsUUFBUSxDQUFtQjtRQUMzQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUMzQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ2xCLGlCQUFZLEdBQVosWUFBWSxDQUFlO1FBQzNCLGVBQVUsR0FBVixVQUFVLENBQWE7UUFDdkIsU0FBSSxHQUFKLElBQUksQ0FBVTtRQUNkLFVBQUssR0FBTCxLQUFLLENBQUs7UUFDVixVQUFLLEdBQUwsS0FBSyxDQUFJO1FBQ1QsU0FBSSxHQUFKLElBQUksQ0FBSTtRQUNSLGdCQUFXLEdBQVgsV0FBVyxDQUFJO1FBQ2Ysa0JBQWEsR0FBYixhQUFhLENBQUk7UUFDakIsY0FBUyxHQUFULFNBQVMsQ0FBSTtRQUNiLGVBQVUsR0FBVixVQUFVLENBQUk7UUFDZCxpQkFBWSxHQUFaLFlBQVksQ0FBSTtRQUNoQixlQUFVLEdBQVYsVUFBVSxDQUFJO1FBQ2QsaUJBQVksR0FBWixZQUFZLENBQUk7UUFDaEIsV0FBTSxHQUFOLE1BQU0sQ0FBK0I7UUFDckMsVUFBSyxHQUFMLEtBQUssQ0FBTTtRQUNYLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixXQUFNLEdBQU4sTUFBTSxDQUFJO1FBQ1YsbUJBQWMsR0FBZCxjQUFjLENBQUk7UUFDbEIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUNKLFlBQU8sR0FBUCxPQUFPLENBQWU7UUFDdEIsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7UUFDL0IsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUNYLFVBQUssR0FBTCxLQUFLLENBQU87UUFDWixhQUFRLEdBQVIsUUFBUSxDQUFJO0lBQ2xCLENBQUM7Q0FDTDtBQUtELE1BQU0sT0FBTyxZQUFZO0NBR3hCO0FBRUQsTUFBTSxPQUFPLFFBQVE7Q0FJcEI7QUFFRCxNQUFNLE9BQU8sU0FBUztDQUdyQjtBQUVELE1BQU0sT0FBTyxLQUFLO0NBSWpCO0FBYUQsc0RBQXNEO0FBQ3RELE1BQU0sT0FBTyxTQUFTO0lBRXBCLFlBQ1MsS0FBSyxDQUFDLEVBQ04sS0FBSyxDQUFDLEVBQ04sS0FBSyxDQUFDLEVBQ04sS0FBSyxDQUFDLEVBQ04sTUFBTSxDQUFDO1FBSlAsT0FBRSxHQUFGLEVBQUUsQ0FBSTtRQUNOLE9BQUUsR0FBRixFQUFFLENBQUk7UUFDTixPQUFFLEdBQUYsRUFBRSxDQUFJO1FBQ04sT0FBRSxHQUFGLEVBQUUsQ0FBSTtRQUNOLFFBQUcsR0FBSCxHQUFHLENBQUk7UUFOVCxPQUFFLEdBQUksQ0FBQyxDQUFDO0lBT1osQ0FBQztDQUNMO0FBV0Q7Ozs7OztHQU1HO0FBQ0gsTUFBTSxPQUFPLFdBQVc7SUFDdEIsWUFDUyxLQUFLLEdBQUcsRUFDUixLQUFLLEdBQUcsRUFDUixLQUFLLElBQUksRUFDVCxLQUFLLElBQUk7UUFIVCxPQUFFLEdBQUYsRUFBRSxDQUFNO1FBQ1IsT0FBRSxHQUFGLEVBQUUsQ0FBTTtRQUNSLE9BQUUsR0FBRixFQUFFLENBQU87UUFDVCxPQUFFLEdBQUYsRUFBRSxDQUFPO0lBQ2YsQ0FBQztDQUNMO0FBRUQsTUFBTSxPQUFPLGlCQUFpQjtDQWtCN0I7QUEyQkQsTUFBTSxPQUFPLHdCQUF3QjtJQWFuQyxZQUFZLElBQU87UUFDakIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2lnbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjbGFzcyBOZ3VDYXJvdXNlbFN0b3JlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHRvdWNoID0gbmV3IFRvdWNoKCksXG4gICAgcHVibGljIHZlcnRpY2FsID0gbmV3IFZlcnRpY2FsKCksXG4gICAgcHVibGljIGludGVydmFsPzogQ2Fyb3VzZWxJbnRlcnZhbCxcbiAgICBwdWJsaWMgdHJhbnNmb3JtID0gbmV3IFRyYW5zZnJvbSgpLFxuICAgIHB1YmxpYyBidXR0b24/OiBOZ3VCdXR0b24sXG4gICAgcHVibGljIHZpc2libGVJdGVtcz86IEl0ZW1zQ29udHJvbCxcbiAgICBwdWJsaWMgZGV2aWNlVHlwZT86IERldmljZVR5cGUsXG4gICAgcHVibGljIHR5cGUgPSAnZml4ZWQnLFxuICAgIHB1YmxpYyB0b2tlbiA9ICcnLFxuICAgIHB1YmxpYyBpdGVtcyA9IDAsXG4gICAgcHVibGljIGxvYWQgPSAwLFxuICAgIHB1YmxpYyBkZXZpY2VXaWR0aCA9IDAsXG4gICAgcHVibGljIGNhcm91c2VsV2lkdGggPSAwLFxuICAgIHB1YmxpYyBpdGVtV2lkdGggPSAwLFxuICAgIHB1YmxpYyBzbGlkZUl0ZW1zID0gMCxcbiAgICBwdWJsaWMgaXRlbVdpZHRoUGVyID0gMCxcbiAgICBwdWJsaWMgaXRlbUxlbmd0aCA9IDAsXG4gICAgcHVibGljIGN1cnJlbnRTbGlkZSA9IDAsXG4gICAgcHVibGljIGVhc2luZyA9ICdjdWJpYy1iZXppZXIoMCwgMCwgMC4yLCAxKScsXG4gICAgcHVibGljIHNwZWVkID0gMjAwLFxuICAgIHB1YmxpYyBsb29wID0gZmFsc2UsXG4gICAgcHVibGljIGRleFZhbCA9IDAsXG4gICAgcHVibGljIHRvdWNoVHJhbnNmb3JtID0gMCxcbiAgICBwdWJsaWMgaXNFbmQgPSBmYWxzZSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNGaXJzdCA9IHNpZ25hbCh0cnVlKSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNMYXN0ID0gc2lnbmFsKGZhbHNlKSxcbiAgICBwdWJsaWMgUlRMID0gZmFsc2UsXG4gICAgcHVibGljIHBvaW50ID0gdHJ1ZSxcbiAgICBwdWJsaWMgdmVsb2NpdHkgPSAxXG4gICkge31cbn1cbmV4cG9ydCB0eXBlIERldmljZVR5cGUgPSAneHMnIHwgJ3NtJyB8ICdtZCcgfCAnbGcnIHwgJ3hsJyB8ICdhbGwnO1xuXG5leHBvcnQgdHlwZSBCdXR0b25WaXNpYmxlID0gJ2Rpc2FibGVkJyB8ICdoaWRlJztcblxuZXhwb3J0IGNsYXNzIEl0ZW1zQ29udHJvbCB7XG4gIHN0YXJ0OiBudW1iZXI7XG4gIGVuZDogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgVmVydGljYWwge1xuICBlbmFibGVkOiBib29sZWFuO1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgLy8gbnVtSGVpZ2h0PzogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgTmd1QnV0dG9uIHtcbiAgdmlzaWJpbGl0eT86IEJ1dHRvblZpc2libGU7XG4gIGVsYXN0aWM/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBUb3VjaCB7XG4gIGFjdGl2ZT86IGJvb2xlYW47XG4gIHN3aXBlOiBzdHJpbmc7XG4gIHZlbG9jaXR5OiBudW1iZXI7XG59XG5cbi8vIEludGVyZmFjZSBpcyBkZWNsYXJlZCB0byBwcmV2ZW50IHByb3BlcnR5LW1pbmlmaWNhdGlvblxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdWl1bml2ZXJzYWwvbmd1LWNhcm91c2VsL2lzc3Vlcy8zMjJcbmRlY2xhcmUgaW50ZXJmYWNlIFRyYW5zZm9ybUludGVyZmFjZSB7XG4gIHhzOiBudW1iZXI7XG4gIHNtOiBudW1iZXI7XG4gIG1kOiBudW1iZXI7XG4gIGxnOiBudW1iZXI7XG4gIHhsPzogbnVtYmVyO1xuICBhbGw6IG51bWJlcjtcbn1cblxuLy8gVGhpcyBpcyBtaXNzcGVsbGVkLiBNdXN0IGJlIGNoYW5nZWQgdG8gYFRyYW5zZm9ybWAuXG5leHBvcnQgY2xhc3MgVHJhbnNmcm9tIGltcGxlbWVudHMgVHJhbnNmb3JtSW50ZXJmYWNlIHtcbiAgcHVibGljIHhsPyA9IDA7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyB4cyA9IDAsXG4gICAgcHVibGljIHNtID0gMCxcbiAgICBwdWJsaWMgbWQgPSAwLFxuICAgIHB1YmxpYyBsZyA9IDAsXG4gICAgcHVibGljIGFsbCA9IDBcbiAgKSB7fVxufVxuXG4vLyBJbnRlcmZhY2UgaXMgZGVjbGFyZWQgdG8gcHJldmVudCBwcm9wZXJ0eS1taW5pZmljYXRpb25cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3VpdW5pdmVyc2FsL25ndS1jYXJvdXNlbC9pc3N1ZXMvMzIyXG5kZWNsYXJlIGludGVyZmFjZSBCcmVha3BvaW50c0ludGVyZmFjZSB7XG4gIHNtOiBudW1iZXI7XG4gIG1kOiBudW1iZXI7XG4gIGxnOiBudW1iZXI7XG4gIHhsOiBudW1iZXI7XG59XG5cbi8qKlxuICogRGVmYXVsdCB2YWx1ZXNcbiAqIHtzbTogNzY4LCBtZDogOTkyLCBsZzogMTIwMCwgeGw6IDEyMDB9XG4gKlxuICogQm9vdHN0cmFwIHZhbHVlczpcbiAqIHtzbTogNTc2LCBtZDogNzY4LCBsZzogOTkyLCB4bDogMTIwMH1cbiAqL1xuZXhwb3J0IGNsYXNzIEJyZWFrcG9pbnRzIGltcGxlbWVudHMgQnJlYWtwb2ludHNJbnRlcmZhY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgc20gPSA3NjgsXG4gICAgcHVibGljIG1kID0gOTkyLFxuICAgIHB1YmxpYyBsZyA9IDEyMDAsXG4gICAgcHVibGljIHhsID0gMTIwMFxuICApIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBOZ3VDYXJvdXNlbENvbmZpZyB7XG4gIGdyaWQ6IFRyYW5zZnJvbTtcbiAgZ3JpZEJyZWFrcG9pbnRzPzogQnJlYWtwb2ludHM7XG4gIHNsaWRlPzogbnVtYmVyO1xuICBzcGVlZD86IG51bWJlcjtcbiAgaW50ZXJ2YWw/OiBDYXJvdXNlbEludGVydmFsO1xuICBhbmltYXRpb24/OiBBbmltYXRlO1xuICBwb2ludD86IFBvaW50O1xuICB0eXBlPzogc3RyaW5nO1xuICBsb2FkPzogbnVtYmVyO1xuICBjdXN0b20/OiBDdXN0b207XG4gIGxvb3A/OiBib29sZWFuO1xuICB0b3VjaD86IGJvb2xlYW47XG4gIGVhc2luZz86IHN0cmluZztcbiAgUlRMPzogYm9vbGVhbjtcbiAgYnV0dG9uPzogTmd1QnV0dG9uO1xuICB2ZXJ0aWNhbD86IFZlcnRpY2FsO1xuICB2ZWxvY2l0eT86IG51bWJlcjtcbn1cblxuZXhwb3J0IHR5cGUgQ3VzdG9tID0gJ2Jhbm5lcic7XG5leHBvcnQgdHlwZSBBbmltYXRlID0gJ2xhenknO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBvaW50IHtcbiAgdmlzaWJsZTogYm9vbGVhbjtcbiAgaGlkZU9uU2luZ2xlU2xpZGU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFuaW1hdGlvbiB7XG4gIHR5cGU/OiBBbmltYXRlO1xuICBhbmltYXRlU3R5bGVzPzogQW5pbWF0aW9uU3R5bGVzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFuaW1hdGlvblN0eWxlcyB7XG4gIHN0eWxlPzogc3RyaW5nO1xuICBvcGVuPzogc3RyaW5nO1xuICBjbG9zZT86IHN0cmluZztcbiAgc3RhZ2dlcj86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYXJvdXNlbEludGVydmFsIHtcbiAgdGltaW5nOiBudW1iZXI7XG4gIGluaXRpYWxEZWxheT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIE5ndUNhcm91c2VsT3V0bGV0Q29udGV4dDxUPiB7XG4gIC8qKiBEYXRhIGZvciB0aGUgbm9kZS4gKi9cbiAgJGltcGxpY2l0OiBUO1xuXG4gIC8qKiBEZXB0aCBvZiB0aGUgbm9kZS4gKi9cbiAgbGV2ZWw6IG51bWJlcjtcblxuICAvKiogSW5kZXggbG9jYXRpb24gb2YgdGhlIG5vZGUuICovXG4gIGluZGV4PzogbnVtYmVyO1xuXG4gIC8qKiBMZW5ndGggb2YgdGhlIG51bWJlciBvZiB0b3RhbCBkYXRhTm9kZXMuICovXG4gIGNvdW50PzogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE6IFQpIHtcbiAgICB0aGlzLiRpbXBsaWNpdCA9IGRhdGE7XG4gIH1cbn1cbiJdfQ==