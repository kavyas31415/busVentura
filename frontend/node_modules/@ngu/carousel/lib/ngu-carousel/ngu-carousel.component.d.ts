import { ElementRef, NgIterable, OnDestroy, TrackByFunction } from '@angular/core';
import { NguCarouselConfig, NguCarouselStore } from './ngu-carousel';
import * as i0 from "@angular/core";
type NguCarouselDataSource<T, U> = (U & NgIterable<T>) | null | undefined;
export declare class NguCarousel<T, U extends NgIterable<T> = NgIterable<T>> extends NguCarouselStore implements OnDestroy {
    private _host;
    private _renderer;
    private _differs;
    private _isBrowser;
    private _ngZone;
    private _nguWindowScrollListener;
    private _nguCarouselHammerManager;
    private _cdr;
    /** Public property that may be accessed outside of the component. */
    readonly activePoint: import("@angular/core").WritableSignal<number>;
    readonly pointNumbers: import("@angular/core").WritableSignal<number[]>;
    inputs: import("@angular/core").InputSignal<NguCarouselConfig>;
    carouselLoad: import("@angular/core").OutputEmitterRef<number>;
    onMove: import("@angular/core").OutputEmitterRef<this>;
    private _defDirectives;
    private _nodeOutlet;
    nextButton: import("@angular/core").Signal<ElementRef<any> | undefined>;
    prevButton: import("@angular/core").Signal<ElementRef<any> | undefined>;
    carouselMain1: import("@angular/core").Signal<ElementRef<any>>;
    _nguItemsContainer: import("@angular/core").Signal<ElementRef<any>>;
    _touchContainer: import("@angular/core").Signal<ElementRef<any>>;
    private _arrayChanges;
    dataSource: import("@angular/core").InputSignalWithTransform<U & NgIterable<T>, NguCarouselDataSource<T, U>>;
    private _intervalController$;
    private _hammer;
    private _withAnimation;
    private _directionSymbol;
    private _carouselCssNode;
    private _dataDiffer;
    private _styleid;
    private _pointIndex;
    private _destroy$;
    /**
     * Tracking function that will be used to check the differences in data changes. Used similarly
     * to `ngFor` `trackBy` function. Optimize Items operations by identifying a Items based on its data
     * relative to the function to know if a Items should be added/removed/moved.
     * Accepts a function that takes two parameters, `index` and `item`.
     */
    trackBy: import("@angular/core").InputSignal<TrackByFunction<T> | undefined>;
    _trackByFn: import("@angular/core").Signal<TrackByFunction<T>>;
    constructor();
    private _checkChanges;
    private renderNodeChanges;
    /**
     * Updates the index-related context for each row to reflect any changes in the index of the rows,
     * e.g. first/last/even/odd.
     */
    private _updateItemIndexContext;
    private _getNodeDef;
    private _inputValidation;
    ngOnDestroy(): void;
    /** Get Touch input */
    private _setupHammer;
    /** handle touch input */
    private _touchHandling;
    private _setTouchTransfrom;
    private _setTransformFromTouch;
    /** this fn used to disable the interval when it is not on the viewport */
    private _onWindowScrolling;
    /** store data based on width of the screen for the carousel */
    private _storeCarouselData;
    /** Used to reset the carousel */
    reset(withoutAnimation?: boolean): void;
    /** Init carousel point */
    private _carouselPoint;
    /** change the active point in carousel */
    private _carouselPointActiver;
    /** this function is used to scoll the carousel when point is clicked */
    moveTo(slide: number, withoutAnimation?: boolean): void;
    /** set the style of the carousel based the inputs data */
    private _carouselSize;
    /** logic to scroll the carousel step 1 */
    private _carouselScrollOne;
    /** logic to scroll the carousel step 2 */
    private _carouselScrollTwo;
    /** boolean function for making isFirst and isLast */
    private _btnBoolean;
    private _transformString;
    /** set the transform style to scroll the carousel  */
    private _transformStyle;
    /** this will trigger the carousel to load the items */
    private _carouselLoadTrigger;
    /** generate Class for each carousel to set specific style */
    private _generateID;
    /** handle the auto slide */
    private _carouselInterval;
    /** animate the carousel items */
    private _carouselAnimator;
    private _removeAnimations;
    /** Short form for setElementStyle */
    private _setStyle;
    /** For generating style tag */
    private _createStyleElem;
    private _setupWindowResizeListener;
    static ngAcceptInputType_dataSource: NguCarouselDataSource<any, any>;
    static ɵfac: i0.ɵɵFactoryDeclaration<NguCarousel<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NguCarousel<any, any>, "ngu-carousel", never, { "inputs": { "alias": "inputs"; "required": true; "isSignal": true; }; "dataSource": { "alias": "dataSource"; "required": true; "isSignal": true; }; "trackBy": { "alias": "trackBy"; "required": false; "isSignal": true; }; }, { "carouselLoad": "carouselLoad"; "onMove": "onMove"; }, ["_defDirectives", "nextButton", "prevButton"], ["[NguCarouselPrev]", "[NguCarouselNext]", "[NguCarouselPoint]"], true, never>;
}
export {};
