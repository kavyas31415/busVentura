/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ComponentLoaderService } from './services/component-loader.service';
import { FeedbackButtonComponent } from './components/feedback-button/feedback-button.component';
import { OrchestratorService } from './services';
import * as i0 from "@angular/core";
import * as i1 from "./services/component-loader.service";
import * as i2 from "./services/orchestrator.service";
export class NgxFeedbackService {
    /**
     * @param {?} componentLoader
     * @param {?} orchestratorService
     */
    constructor(componentLoader, orchestratorService) {
        this.componentLoader = componentLoader;
        this.orchestratorService = orchestratorService;
    }
    /**
     * @return {?}
     */
    listenForFeedbacks() {
        this.orchestratorService.ngOnInit();
        this.componentLoader.load(FeedbackButtonComponent);
        return this.orchestratorService.onSend;
    }
}
NgxFeedbackService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgxFeedbackService.ctorParameters = () => [
    { type: ComponentLoaderService },
    { type: OrchestratorService }
];
/** @nocollapse */ NgxFeedbackService.ngInjectableDef = i0.defineInjectable({ factory: function NgxFeedbackService_Factory() { return new NgxFeedbackService(i0.inject(i1.ComponentLoaderService), i0.inject(i2.OrchestratorService)); }, token: NgxFeedbackService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxFeedbackService.prototype.componentLoader;
    /**
     * @type {?}
     * @private
     */
    NgxFeedbackService.prototype.orchestratorService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZlZWRiYWNrLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZmVlZGJhY2svIiwic291cmNlcyI6WyJsaWIvbmd4LWZlZWRiYWNrLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDN0UsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDakcsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sWUFBWSxDQUFDOzs7O0FBS2pELE1BQU0sT0FBTyxrQkFBa0I7Ozs7O0lBQzNCLFlBQ3FCLGVBQWdFLEVBQ2hFLG1CQUF3QztRQUR4QyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUQ7UUFDaEUsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtJQUMxRCxDQUFDOzs7O0lBRUosa0JBQWtCO1FBQ2QsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFFbkQsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDO0lBQzNDLENBQUM7OztZQWRKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7OztZQU5RLHNCQUFzQjtZQUV0QixtQkFBbUI7Ozs7Ozs7O0lBT3BCLDZDQUFpRjs7Ozs7SUFDakYsaURBQXlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50TG9hZGVyU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvY29tcG9uZW50LWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IEZlZWRiYWNrQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2ZlZWRiYWNrLWJ1dHRvbi9mZWVkYmFjay1idXR0b24uY29tcG9uZW50JztcbmltcG9ydCB7IE9yY2hlc3RyYXRvclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hGZWVkYmFja1NlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGNvbXBvbmVudExvYWRlcjogQ29tcG9uZW50TG9hZGVyU2VydmljZTxGZWVkYmFja0J1dHRvbkNvbXBvbmVudD4sXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgb3JjaGVzdHJhdG9yU2VydmljZTogT3JjaGVzdHJhdG9yU2VydmljZVxuICAgICkge31cblxuICAgIGxpc3RlbkZvckZlZWRiYWNrcygpIHtcbiAgICAgICAgdGhpcy5vcmNoZXN0cmF0b3JTZXJ2aWNlLm5nT25Jbml0KCk7XG4gICAgICAgIHRoaXMuY29tcG9uZW50TG9hZGVyLmxvYWQoRmVlZGJhY2tCdXR0b25Db21wb25lbnQpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLm9yY2hlc3RyYXRvclNlcnZpY2Uub25TZW5kO1xuICAgIH1cbn1cbiJdfQ==