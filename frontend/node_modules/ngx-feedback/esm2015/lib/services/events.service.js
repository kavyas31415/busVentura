/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class EventsService {
    constructor() {
        this.feedbackClick = new Subject();
        this.feedbackClickObservable = this.feedbackClick.asObservable();
        this.specificFeedbackClick = new Subject();
        this.specificFeedbackClickObservable = this.specificFeedbackClick.asObservable();
        this.genericFeedbackClick = new Subject();
        this.genericFeedbackClickObservable = this.genericFeedbackClick.asObservable();
        this.closeClick = new Subject();
        this.closeClickClickObservable = this.closeClick.asObservable();
        this.onSendClick = new Subject();
        this.onSendClickObservable = this.onSendClick.asObservable();
    }
    /**
     * @return {?}
     */
    onSpecificFeedbackClick() {
        this.specificFeedbackClick.next();
    }
    /**
     * @return {?}
     */
    onGenericFeedbackClik() {
        this.genericFeedbackClick.next();
    }
    /**
     * @return {?}
     */
    onFeedbackButtonClick() {
        this.feedbackClick.next();
    }
    /**
     * @return {?}
     */
    onCloseClicked() {
        this.closeClick.next();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onSendClicked(data) {
        this.onSendClick.next(data);
    }
}
EventsService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
EventsService.ctorParameters = () => [];
/** @nocollapse */ EventsService.ngInjectableDef = i0.defineInjectable({ factory: function EventsService_Factory() { return new EventsService(); }, token: EventsService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    EventsService.prototype.feedbackClick;
    /** @type {?} */
    EventsService.prototype.feedbackClickObservable;
    /**
     * @type {?}
     * @private
     */
    EventsService.prototype.specificFeedbackClick;
    /** @type {?} */
    EventsService.prototype.specificFeedbackClickObservable;
    /**
     * @type {?}
     * @private
     */
    EventsService.prototype.genericFeedbackClick;
    /** @type {?} */
    EventsService.prototype.genericFeedbackClickObservable;
    /**
     * @type {?}
     * @private
     */
    EventsService.prototype.closeClick;
    /** @type {?} */
    EventsService.prototype.closeClickClickObservable;
    /**
     * @type {?}
     * @private
     */
    EventsService.prototype.onSendClick;
    /** @type {?} */
    EventsService.prototype.onSendClickObservable;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZmVlZGJhY2svIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZXZlbnRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQzs7QUFJM0MsTUFBTSxPQUFPLGFBQWE7SUFDdEI7UUFFUSxrQkFBYSxHQUFpQixJQUFJLE9BQU8sRUFBTyxDQUFDO1FBQ3pELDRCQUF1QixHQUFvQixJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXJFLDBCQUFxQixHQUFpQixJQUFJLE9BQU8sRUFBTyxDQUFDO1FBQ2pFLG9DQUErQixHQUFvQixJQUFJLENBQUMscUJBQXFCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFckYseUJBQW9CLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7UUFDaEUsbUNBQThCLEdBQW9CLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUVuRixlQUFVLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7UUFDdEQsOEJBQXlCLEdBQW9CLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFcEUsZ0JBQVcsR0FBaUIsSUFBSSxPQUFPLEVBQWdCLENBQUM7UUFDaEUsMEJBQXFCLEdBQTZCLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7SUFmbkUsQ0FBQzs7OztJQWlCaEIsdUJBQXVCO1FBQ25CLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QyxDQUFDOzs7O0lBRUQscUJBQXFCO1FBQ2pCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyQyxDQUFDOzs7O0lBQ0QscUJBQXFCO1FBQ2pCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDOUIsQ0FBQzs7OztJQUVELGNBQWM7UUFDVixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBRUQsYUFBYSxDQUFDLElBQWtCO1FBQzVCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7OztZQXBDSixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7Ozs7Ozs7O0lBSTlCLHNDQUF5RDs7SUFDekQsZ0RBQTZFOzs7OztJQUU3RSw4Q0FBaUU7O0lBQ2pFLHdEQUE2Rjs7Ozs7SUFFN0YsNkNBQWdFOztJQUNoRSx1REFBMkY7Ozs7O0lBRTNGLG1DQUFzRDs7SUFDdEQsa0RBQTRFOzs7OztJQUU1RSxvQ0FBZ0U7O0lBQ2hFLDhDQUFrRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBGZWVkYmFja0RhdGEgfSBmcm9tICcuLi9tb2RlbHMvZmVlZGJhY2stZGF0YS5tb2RlbCc7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgRXZlbnRzU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gICAgcHJpdmF0ZSBmZWVkYmFja0NsaWNrOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgICBmZWVkYmFja0NsaWNrT2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxhbnk+ID0gdGhpcy5mZWVkYmFja0NsaWNrLmFzT2JzZXJ2YWJsZSgpO1xyXG5cclxuICAgIHByaXZhdGUgc3BlY2lmaWNGZWVkYmFja0NsaWNrOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgICBzcGVjaWZpY0ZlZWRiYWNrQ2xpY2tPYnNlcnZhYmxlOiBPYnNlcnZhYmxlPGFueT4gPSB0aGlzLnNwZWNpZmljRmVlZGJhY2tDbGljay5hc09ic2VydmFibGUoKTtcclxuXHJcbiAgICBwcml2YXRlIGdlbmVyaWNGZWVkYmFja0NsaWNrOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgICBnZW5lcmljRmVlZGJhY2tDbGlja09ic2VydmFibGU6IE9ic2VydmFibGU8YW55PiA9IHRoaXMuZ2VuZXJpY0ZlZWRiYWNrQ2xpY2suYXNPYnNlcnZhYmxlKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBjbG9zZUNsaWNrOiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgICBjbG9zZUNsaWNrQ2xpY2tPYnNlcnZhYmxlOiBPYnNlcnZhYmxlPGFueT4gPSB0aGlzLmNsb3NlQ2xpY2suYXNPYnNlcnZhYmxlKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBvblNlbmRDbGljazogU3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3Q8RmVlZGJhY2tEYXRhPigpO1xyXG4gICAgb25TZW5kQ2xpY2tPYnNlcnZhYmxlOiBPYnNlcnZhYmxlPEZlZWRiYWNrRGF0YT4gPSB0aGlzLm9uU2VuZENsaWNrLmFzT2JzZXJ2YWJsZSgpO1xyXG5cclxuICAgIG9uU3BlY2lmaWNGZWVkYmFja0NsaWNrKCkge1xyXG4gICAgICAgIHRoaXMuc3BlY2lmaWNGZWVkYmFja0NsaWNrLm5leHQoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkdlbmVyaWNGZWVkYmFja0NsaWsoKSB7XHJcbiAgICAgICAgdGhpcy5nZW5lcmljRmVlZGJhY2tDbGljay5uZXh0KCk7XHJcbiAgICB9XHJcbiAgICBvbkZlZWRiYWNrQnV0dG9uQ2xpY2soKSB7XHJcbiAgICAgICAgdGhpcy5mZWVkYmFja0NsaWNrLm5leHQoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNsb3NlQ2xpY2tlZCgpIHtcclxuICAgICAgICB0aGlzLmNsb3NlQ2xpY2submV4dCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uU2VuZENsaWNrZWQoZGF0YTogRmVlZGJhY2tEYXRhKSB7XHJcbiAgICAgICAgdGhpcy5vblNlbmRDbGljay5uZXh0KGRhdGEpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==